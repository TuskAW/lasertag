// https://github.com/oculus-samples/Unity-DepthAPI/issues/16
#include "../DepthKit.hlsl"

#pragma kernel CSMain

RWTexture2D<float4> HeightMap;
RWTexture2D<uint> PerFrameHeightMap : register(u0);

float RoomSize;
float HeightMax;

int HeightTexSize;
int DepthSamples;

float MinDistance;
float MaxDistance;

float3 DepthFramePos;

float CropFactor;

float2 WorldToHeightUV(float3 world)
{
	return float2(world.xz / RoomSize + 0.5);
}

bool WorldWithinDepthFrame(float3 world)
{
	float3 ndc = WorldtoNDC(world);
	return (ndc.x > CropFactor) * (ndc.x < 1 - CropFactor)
		* (ndc.y > CropFactor) * (ndc.y < 1 - CropFactor);
}

[numthreads(8, 8, 1)] 
void CSMain(uint3 id : SV_DispatchThreadID) 
{
	float2 depthUV = CropFactor + (((float2) id.xy) / DepthSamples) * (1 - CropFactor * 2);
	
	float4 depthEdge = SampleEdgeDepthPointNDC(depthUV);
	float depth = 1 - depthEdge.g;
	float3 depthWorld = NDCtoWorld(float3(depthUV, depth));
	bool depthWorldBelowHeight = depthWorld.y < HeightMax;
	
	bool notEdge = (1 - (depthEdge.r - depthEdge.g) * 999) > 0.5;
	
	float dist = distance(depthWorld, DepthFramePos);
	bool withinDistance = (dist > MinDistance) * (dist < MaxDistance);
	
	uint2 sampleCoord = WorldToHeightUV(depthWorld) * HeightTexSize;
	
	float normHeight = depthWorld.y / HeightMax; 
	float previousNormHeight = HeightMap[sampleCoord].r;
	
	float3 previousHeightPos = float3(depthWorld.x, previousNormHeight * HeightMax, depthWorld.z);
	bool previousHeightWithinDepthFrame = WorldWithinDepthFrame(previousHeightPos);
	
    bool valid = depthWorldBelowHeight * withinDistance * previousHeightWithinDepthFrame * notEdge;
	
	normHeight = lerp(previousNormHeight, normHeight, valid);
	
	uint normHeightAsUInt8 = (uint) (normHeight * 255);
    
	float4 h = HeightMap[sampleCoord];
    h.g = lerp(h.g, 1, valid);
    HeightMap[sampleCoord] = h;
	
    PerFrameHeightMap[sampleCoord] = max(PerFrameHeightMap[sampleCoord], normHeightAsUInt8);
}